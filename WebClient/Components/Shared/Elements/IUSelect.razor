@typeparam TItem

<div>
	<label for="@Id" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">@Label</label>
	<select id="@Id"
			class="@SelectClass"
			@onchange="OnValueChanged"
			value="@Convert.ToString(Value)"
			required="@Required">
		@if (!string.IsNullOrEmpty(Placeholder))
		{
			<option value="">@Placeholder</option>
		}
		@foreach (var item in Options)
		{
			<option value="@GetValue(item)">
				@GetText(item)
			</option>
		}
	</select>
</div>

@code {
	[Parameter] public string Label { get; set; } = "Select";
	[Parameter] public string Placeholder { get; set; } = "Please select";
	[Parameter] public string Id { get; set; } = Guid.NewGuid().ToString();
	[Parameter] public bool Required { get; set; } = false;
	[Parameter] public string SelectClass { get; set; } = "block w-full p-2 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500";

	[Parameter] public IEnumerable<TItem> Options { get; set; }
	[Parameter] public Func<TItem, string> GetText { get; set; }
	[Parameter] public Func<TItem, string> GetValue { get; set; }

	[Parameter] public string Value { get; set; }
	[Parameter] public EventCallback<string> ValueChanged { get; set; }

	private async Task OnValueChanged(ChangeEventArgs e)
	{
		Value = e.Value?.ToString();
		await ValueChanged.InvokeAsync(Value);
	}
}
